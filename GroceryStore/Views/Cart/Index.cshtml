@model List<GroceryStore.Models.DataLayer.ShoppingCartItem> // Assuming this is your cart model

<h2>Your Shopping Cart</h2>

<table class="table">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Any())
        {
            foreach (var item in Model)
            {
                <tr>
                    <td>@item.Product?.Name</td>
                    <td>
                        <input type="number" min="1" value="@item.Quantity" id="quantity-@item.ProductId" class="form-control" oninput="showUpdateButton(@item.ProductId)" style="width: 80px;" />
                    </td>
                    <td>@item.Product?.Price?.ToString("C")</td>
                    <td>@((item.Quantity * item.Product?.Price)?.ToString("C"))</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" id="update-button-@item.ProductId" style="display: none;" onclick="updateQuantity(@item.ProductId)">Update</button>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart(@item.ProductId)">Remove</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">Your cart is empty.</td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" onclick="checkout()">Checkout</button>

<script>
    function showUpdateButton(productId) {
        const updateButton = document.getElementById(`update-button-${productId}`);
        updateButton.style.display = 'inline-block'; // Show the update button
    }
    function updateQuantity(productId) {
        const quantity = document.getElementById(`quantity-${productId}`).value;

        fetch('/Cart/UpdateQuantity?productId=' + productId + "&&quantity=" + quantity, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Anti-forgery token
            },
            body: JSON.stringify({ productId: productId, quantity: quantity })
        })
        .then(response => {
            if (response.ok) {
                alert('Quantity updated successfully!');
                // Optionally refresh the cart UI
                location.reload(); // Reload the cart to see updated quantities
            } else {
                alert('Error updating quantity');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function removeFromCart(productId) {
        fetch('/Cart/RemoveFromCart?productId='+productId, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Anti-forgery token
            },
            body: JSON.stringify({ productId: productId })
        })
        .then(response => {
            if (response.ok) {
                alert('Product removed from cart!');
                location.reload(); // Reload the cart to see changes
            } else {
                alert('Error removing product');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function checkout() {
        window.location.href = '/Cart/Checkout'; // Redirect to checkout
    }
</script>
